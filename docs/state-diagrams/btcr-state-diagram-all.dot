/* graphviz exploration of DID:BTCR state diagram  [fr0b 20170718 08:19 MST] */

#if !defined(NIGHT_MODE)

#define GRAPH_BGCOLOR                white
#define GRAPH_FGCOLOR                black
#define STATE_FONTCOLOR              black
#define STATE_COLOR                  black
#define TX_FONTCOLOR                 black
#define TX_FILLCOLOR                 white

#define BEGIN_STATE_COLOR            "#A0FFA0"
#define VALID_STATE_COLOR            "#80A0FF"
#define FROZEN_STATE_COLOR           "#D060A0"
#define SETTLING_LOCAL_STATE_COLOR   "#5070FF"
#define SETTLING_CROSS_STATE_COLOR   "#40A0FF"
#define REVOKE_STATE_COLOR           "#FF50B0"

#else /* NIGHT_MODE */

#define GRAPH_BGCOLOR                black
#define GRAPH_FGCOLOR                white
#define STATE_FONTCOLOR              white
#define STATE_COLOR                  white
#define TX_FONTCOLOR                 white
#define TX_FILLCOLOR                 "#555555"

#define BEGIN_STATE_COLOR            "#408040"
#define VALID_STATE_COLOR            "#404080"
#define FROZEN_STATE_COLOR           "#8040B0"
#define SETTLING_LOCAL_STATE_COLOR   "#4060D0"
#define SETTLING_CROSS_STATE_COLOR   "#4080B0"
#define REVOKE_STATE_COLOR           "#FF50B0"

#endif /* NIGHT_MODE */

#define BEGIN_EDGE_COLOR             "#00B000"
#define REVOKE_FINAL_COLOR           "#FF50B0"
#define VERSION_STRING_COLOR         "#888888"

#define NONCOMPLIANT_TX_COLOR        purple
#define NONCOMPLIANT_EDGE_COLOR      purple
#define THEFT_TX_COLOR               red
#define THEFT_EDGE_COLOR             red
#define RECOVERY_TX_COLOR            "#666666"
#define RECOVERY_EDGE_COLOR          "#666666"
#define UPDATE_TX_COLOR              "#4060ff"
#define UPDATE_EDGE_COLOR            "#4060ff"
#define UPDATE_CROSS_TX_COLOR        "#4090FF"
#define UPDATE_CROSS_EDGE_COLOR      "#4090FF"

#define STATE_FONTSIZE 20
#define UPDATE_PENWIDTH 5

#if !defined(NO_HAND_POSITIONING)
#define PORT_TIMEOUT w
#define PORT_ACTION  e
#else
/* this will emit harmless warnings */
#define PORT_TIMEOUT any
#define PORT_ACTION  any
#endif

digraph self_sovereign_identity_did_btcr_state_diagram {
  pad = "1,1" /* i.e. margin */
  bgcolor = GRAPH_BGCOLOR
  /* newrank = true */

#if defined(DIAGRAM_RECOVERY) || defined(DIAGRAM_SIMPLE) || defined(DIAGRAM_ALL)
  label = BUILD_STRING
  fontcolor = VERSION_STRING_COLOR
  fontsize = 12
  labelpos = b

  subgraph cluster_title_floating {
    label = "Self Sovereign Identity \n State Diagram for DID:BTCR Method"
    fontcolor = GRAPH_FGCOLOR
    labelloc = t
    fontsize = 24
    pencolor = transparent

    foo [
      /* without this, the cluster won't render */
      style = invis
    ]
  }
#endif

#if defined(DIAGRAM_KEY)
  subgraph cluster_state_shapes {
    fontcolor = GRAPH_FGCOLOR
    fontsize = 20
    color = GRAPH_FGCOLOR
    pencolor = transparent
    label = "Key for Shapes"

    subgraph cluster_txs_key {
      fontcolor = GRAPH_FGCOLOR
      fontsize = 16
      color = GRAPH_FGCOLOR
      pencolor = GRAPH_FGCOLOR

      label = "Edges \n\n The Bitcoin transaction initiating action is rendered as an explicit node. \n It is not a state, but rather an elaborate edge label. \n This creates two drawn edges for the single logical state transition."

      tx_X [
        label = "tx: Updating Transaction"
        shape = box
        fontcolor = TX_FONTCOLOR
        fillcolor = TX_FILLCOLOR
        style = filled
        color = RECOVERY_TX_COLOR
      ]

      state_A [
        label = "Some State"
        fontsize = STATE_FONTSIZE
        fontcolor = STATE_FONTCOLOR
        color = VALID_STATE_COLOR
        shape = box
        style = "rounded,filled"
      ]

#if !defined(NO_HAND_POSITIONING)
#define TXX_PORT_IN  sw
#define TXX_PORT_OUT se
#else
/* this will emit harmless warnings */
#define TXX_PORT_IN  any
#define TXX_PORT_OUT any
#endif

      state_A -> tx_X:TXX_PORT_IN [
        label = "note different arrow styles \n on a single logical edge",
        arrowhead = odot,
        arrowtail = crow,
        dir = both
        fontcolor = TX_FONTCOLOR
        color = RECOVERY_EDGE_COLOR
      ]
      tx_X:TXX_PORT_OUT -> state_A [
        fontcolor = TX_FONTCOLOR
        color = RECOVERY_EDGE_COLOR
      ]
    }

    subgraph cluster_states_key {
      fontcolor = GRAPH_FGCOLOR
      fontsize = 16
      color = GRAPH_FGCOLOR
      pencolor = GRAPH_FGCOLOR
      label = "States"

      ending   [
        shape = doubleoctagon
        fontcolor = STATE_FONTCOLOR
        color = REVOKE_STATE_COLOR
        style = filled
      ]
      deciding [
        shape = Mdiamond
        fontcolor = STATE_FONTCOLOR
        color = SETTLING_LOCAL_STATE_COLOR
        style = filled
      ]
      resting  [
        shape = box
        fontcolor = STATE_FONTCOLOR
        color = VALID_STATE_COLOR
        style = "rounded,filled"
      ]
      starting [
        shape = circle
        fontcolor = STATE_FONTCOLOR
        color = BEGIN_STATE_COLOR
        style = filled
      ]
    } /* cluster_states_key */
  }
#endif /* DIAGRAM_KEY */

#if defined(DIAGRAM_RECOVERY) || defined(DIAGRAM_SIMPLE) || defined(DIAGRAM_ALL)
  begin [
    label = "Begin"
    shape = circle
    fontsize = STATE_FONTSIZE
    fontcolor = STATE_FONTCOLOR
    color = BEGIN_STATE_COLOR
    style = filled
    fixedsize = true
    width = 2
  ]
#endif

#if defined(DIAGRAM_SIMPLE) || defined(DIAGRAM_ALL)
  valid_simple [
    label = "Valid DID"
    shape = box
    fontsize = STATE_FONTSIZE
    fontcolor = STATE_FONTCOLOR
    color = VALID_STATE_COLOR
    style = "rounded,filled"
    height = 3
    width = 3
  ]
#endif

#if defined(DIAGRAM_RECOVERY) || defined(DIAGRAM_ALL)
  valid_with_recovery_proof [
    label = "Valid DID \n (with recovery proof)"
    shape = box
    fontsize = STATE_FONTSIZE
    fontcolor = STATE_FONTCOLOR
    color = VALID_STATE_COLOR
    style = "rounded,filled"
    height = 3
    width = 3
  ]
#if defined(DIAGRAM_ALL)
#if !defined(NO_HAND_POSITIONING) || defined(SOME_RANK_POSITIONING_ANYWAY)
  {rank = same valid_simple valid_with_recovery_proof}
#endif
#endif

  settling_to_with_recovery [
    label = "Settling... \n (default 24 hours)"
    shape = Mdiamond
    height = 2
    width = 3
    fixedsize = true
    fontsize = STATE_FONTSIZE
    fontcolor = STATE_FONTCOLOR
    color = SETTLING_LOCAL_STATE_COLOR
    style = filled
  ]

#if defined(DIAGRAM_ALL) && defined(CROSS_TYPES)
  settling_to_simple [
    label = "Settling... \n (default 24 hours)"
    shape = Mdiamond
    height = 2
    width = 3
    fixedsize = true
    fontsize = STATE_FONTSIZE
    fontcolor = STATE_FONTCOLOR
    color = SETTLING_CROSS_STATE_COLOR
    style = filled
  ]
#endif

  frozen [
    shape = Mdiamond
    style = filled
    height = 2
    width = 3
    fixedsize = true
    fontsize = STATE_FONTSIZE
    fontcolor = STATE_FONTCOLOR
    color = FROZEN_STATE_COLOR
    label = "Frozen... \n (default 24 hours)"
  ]
#endif

#if defined(DIAGRAM_RECOVERY) || defined(DIAGRAM_SIMPLE) || defined(DIAGRAM_ALL)
  revoked [
    shape = doubleoctagon
    fontsize = STATE_FONTSIZE
    fontcolor = STATE_FONTCOLOR
    color = REVOKE_STATE_COLOR
    height = 2
    width = 2
    label = "Revoked"
    style = filled
  ]
#endif

#if defined(DIAGRAM_SIMPLE) || defined(DIAGRAM_ALL)
  tx_init_simple [
    label = "tx: Initialize DID \n (requires revocation proof)"
    shape = box
    fontcolor = TX_FONTCOLOR
    fillcolor = TX_FILLCOLOR
    style = filled
    color = BEGIN_EDGE_COLOR
    /* HEY make tx color */
  ]
#endif

#if defined(DIAGRAM_RECOVERY) || defined(DIAGRAM_ALL)
  tx_init_recovery [
    label = "tx: Initialize DID \n (with recovery proof \n and required revocation proof)"
    shape = box
    fontcolor = TX_FONTCOLOR
    fillcolor = TX_FILLCOLOR
    style = filled
    color = BEGIN_EDGE_COLOR
    /* HEY make tx color */
  ]
#endif

#if defined(DIAGRAM_SIMPLE) || defined(DIAGRAM_ALL)
  tx_spend_for_simple [
    label = "tx: Noncompliant BTC Spend"
    shape = box
    fontcolor = TX_FONTCOLOR
    fillcolor = TX_FILLCOLOR
    style = filled
    color = REVOKE_FINAL_COLOR
  ]
#endif
#if defined(DIAGRAM_RECOVERY) || defined(DIAGRAM_ALL)
  tx_spend_with_recovery [
    label = "tx: Noncompliant BTC Spend"
    shape = box
    fontcolor = TX_FONTCOLOR
    fillcolor = TX_FILLCOLOR
    style = filled
    color = NONCOMPLIANT_TX_COLOR
  ]
#endif

#if defined(WITH_ATTACKS)
#if defined(DIAGRAM_RECOVERY) || defined(DIAGRAM_SIMPLE) || defined(DIAGRAM_ALL)
  subgraph cluster_theft {
    fontcolor = GRAPH_FGCOLOR
    color = GRAPH_FGCOLOR

    label="Key Compromise / Theft \n (Compliance is with respect to the resulting transaction chain \n and whether it validates as a DID:BTCR update.)"
#endif

#if defined(DIAGRAM_SIMPLE) || defined(DIAGRAM_ALL)
    tx_theft_A0 [
      label = "tx: Noncompliant BTC Theft"
      shape = box
      fontcolor = TX_FONTCOLOR
      fillcolor = TX_FILLCOLOR
      style = filled
      color = THEFT_TX_COLOR
    ]

    tx_theft_A1 [
      label = "tx: Compliant DID Theft"
      shape = box
      fontcolor = TX_FONTCOLOR
      fillcolor = TX_FILLCOLOR
      style = filled
      color = THEFT_TX_COLOR
    ]
#endif

#if defined(DIAGRAM_RECOVERY) || defined(DIAGRAM_ALL)
    tx_theft_B0 [
      label = "tx: Noncompliant BTC Theft"
      shape = box
      fontcolor = TX_FONTCOLOR
      fillcolor = TX_FILLCOLOR
      style = filled
      color = THEFT_TX_COLOR
    ]

    tx_theft_B1 [
      label = "tx: Compliant DID Theft"
      shape = box
      fontcolor = TX_FONTCOLOR
      fillcolor = TX_FILLCOLOR
      style = filled
      color = THEFT_TX_COLOR
    ]
#endif

#if defined(DIAGRAM_RECOVERY) || defined(DIAGRAM_SIMPLE) || defined(DIAGRAM_ALL)
  } /* cluster_theft */
#endif
#endif /* WITH_ATTACKS */

#if defined(DIAGRAM_RECOVERY) || defined(DIAGRAM_SIMPLE) || defined(DIAGRAM_ALL)
  tx_revocation [
    label = "tx: Explicit Immediate Revocation"
    shape = box
    fontcolor = TX_FONTCOLOR
    fillcolor = TX_FILLCOLOR
    style = filled
    color = REVOKE_FINAL_COLOR
  ]
#endif

#if defined(DIAGRAM_RECOVERY) || defined(DIAGRAM_ALL)
  tx_recovery [
    label = "tx: Recovery \n (DID follows this UTXO)"
    shape = box
    fontcolor = TX_FONTCOLOR
    fillcolor = TX_FILLCOLOR
    style = filled
    color = RECOVERY_TX_COLOR
  ]
#if !defined(NO_HAND_POSITIONING) || defined(SOME_RANK_POSITIONING_ANYWAY)
  {rank = same tx_spend_with_recovery tx_recovery}
#endif
#endif

#if defined(DIAGRAM_SIMPLE) || defined(DIAGRAM_ALL)
  tx_update_simple [
    label = "tx: Simple Compliant Update"
    penwidth = UPDATE_PENWIDTH
    shape = box
    fontcolor = TX_FONTCOLOR
    fillcolor = TX_FILLCOLOR
    style = filled
    color = UPDATE_TX_COLOR
  ]
#endif

#if defined(DIAGRAM_RECOVERY) || defined(DIAGRAM_ALL)
  tx_update_with_recovery_proof [
    label = "tx: Compliant Update \n (including recovery proof)"
    penwidth = UPDATE_PENWIDTH
    shape = box
    fontcolor = TX_FONTCOLOR
    fillcolor = TX_FILLCOLOR
    style = filled
    color = UPDATE_TX_COLOR
  ]
#endif

#if defined(DIAGRAM_ALL) && defined(CROSS_TYPES)
  tx_update_cross_to_simple_from_with_recovery [
    label = "tx: Compliant Update \n (dropping recovery proof)"
    shape = box
    fontcolor = TX_FONTCOLOR
    fillcolor = TX_FILLCOLOR
    style = filled
    color = UPDATE_CROSS_TX_COLOR
  ]

  tx_update_cross_to_with_recovery_from_simple [
    label = "tx: Compliant Update \n (adding recovery proof)"
    shape = box
    fontcolor = TX_FONTCOLOR
    fillcolor = TX_FILLCOLOR
    style = filled
    color = UPDATE_CROSS_TX_COLOR
  ]
#endif /* DIAGRAM_ALL && CROSS_TYPES */

#if defined(DIAGRAM_SIMPLE) || defined(DIAGRAM_ALL)
  begin -> tx_init_simple [
    arrowhead = odot,
    arrowtail = crow,
    dir = both,
    color = BEGIN_EDGE_COLOR
  ]
#endif

#if defined(DIAGRAM_RECOVERY) || defined(DIAGRAM_ALL)
  begin -> tx_init_recovery [
    arrowhead = odot,
    arrowtail = crow,
    dir = both,
    color = BEGIN_EDGE_COLOR
  ]
#endif

#if defined(DIAGRAM_SIMPLE) || defined(DIAGRAM_ALL)
  tx_init_simple -> valid_simple [
    color = BEGIN_EDGE_COLOR
  ]
#endif

#if defined(DIAGRAM_RECOVERY) || defined(DIAGRAM_ALL)
  tx_init_recovery -> valid_with_recovery_proof [
    color = BEGIN_EDGE_COLOR
  ]
#endif

#if defined(DIAGRAM_RECOVERY) || defined(DIAGRAM_ALL)
  valid_with_recovery_proof -> tx_update_with_recovery_proof [
    penwidth = UPDATE_PENWIDTH,
    arrowhead = odot,
    arrowtail = crow,
    dir = both,
    color = UPDATE_TX_COLOR
  ]
  tx_update_with_recovery_proof -> settling_to_with_recovery [
    penwidth = UPDATE_PENWIDTH,
    color = UPDATE_TX_COLOR
  ]

  settling_to_with_recovery:PORT_TIMEOUT -> valid_with_recovery_proof [
    penwidth = UPDATE_PENWIDTH,
    label = "timeout",
    decorate = true,
    fontcolor = UPDATE_TX_COLOR,
    color = UPDATE_TX_COLOR
  ]
  settling_to_with_recovery:PORT_ACTION -> tx_revocation [
    color = REVOKE_FINAL_COLOR
    fontcolor = REVOKE_FINAL_COLOR,
    arrowhead = odot,
    arrowtail = crow,
    dir = both
  ]

#if defined(DIAGRAM_ALL) && defined(CROSS_TYPES)
  valid_with_recovery_proof -> tx_update_cross_to_simple_from_with_recovery [
    arrowhead = odot,
    arrowtail = crow,
    dir = both,
    color = UPDATE_CROSS_EDGE_COLOR
  ]
  tx_update_cross_to_simple_from_with_recovery -> settling_to_simple [
    color = UPDATE_CROSS_EDGE_COLOR
  ]
#endif /* DIAGRAM_ALL && CROSS_TYPES */

#endif /* DIAGRAM_RECOVERY || DIAGRAM_ALL */

#if defined(DIAGRAM_SIMPLE) || defined(DIAGRAM_ALL)
  valid_simple -> tx_update_simple [
    penwidth = UPDATE_PENWIDTH,
    arrowhead = odot,
    arrowtail = crow,
    dir = both,
    color = UPDATE_EDGE_COLOR
  ]
  tx_update_simple -> valid_simple [
    penwidth = UPDATE_PENWIDTH,
    color = UPDATE_EDGE_COLOR
  ]
#if defined(DIAGRAM_ALL) && defined(CROSS_TYPES)
  valid_simple -> tx_update_cross_to_with_recovery_from_simple [
    arrowhead = odot,
    arrowtail = crow,
    dir = both,
    color = UPDATE_CROSS_EDGE_COLOR
  ]
  tx_update_cross_to_with_recovery_from_simple -> valid_with_recovery_proof [
    color = UPDATE_CROSS_EDGE_COLOR
  ]
  settling_to_simple:PORT_TIMEOUT -> valid_simple [
    label = "timeout",
    decorate = true,
    fontcolor = UPDATE_CROSS_EDGE_COLOR,
    color = UPDATE_CROSS_EDGE_COLOR,
#if !defined(NO_HAND_POSITIONING)
    weight = 0
#endif
  ]
  settling_to_simple:PORT_ACTION -> tx_revocation [
    color = REVOKE_FINAL_COLOR,
    fontcolor = REVOKE_FINAL_COLOR,
    arrowhead = odot,
    arrowtail = crow,
    dir = both,
  ]
#endif /* DIAGRAM_ALL && CROSS_TYPES */
#endif /* DIAGRAM_SIMPLE || DIAGRAM_ALL */

#if defined(DIAGRAM_SIMPLE) || defined(DIAGRAM_ALL)
  valid_simple -> tx_spend_for_simple [
    arrowhead = odot,
    arrowtail = crow,
    dir = both,
    color = REVOKE_FINAL_COLOR
  ]
  tx_spend_for_simple -> revoked [
    color = REVOKE_FINAL_COLOR
  ]
#endif
#if defined(DIAGRAM_RECOVERY) || defined(DIAGRAM_ALL)
  valid_with_recovery_proof -> tx_spend_with_recovery [
    arrowhead = odot,
    arrowtail = crow,
    dir = both,
    color = NONCOMPLIANT_EDGE_COLOR
  ]

  tx_spend_with_recovery -> frozen [
    color = NONCOMPLIANT_EDGE_COLOR
  ]
#endif

#if defined(WITH_ATTACKS)
#if defined(DIAGRAM_SIMPLE) || defined(DIAGRAM_ALL)
  valid_simple -> tx_theft_A0 [
    color = THEFT_EDGE_COLOR,
    arrowhead = odot,
    arrowtail = crow,
    dir = both,
  ]
  tx_theft_A0 -> revoked [
    color = THEFT_EDGE_COLOR,
  ]
#endif
#endif /* WITH_ATTACKS */

#if defined(WITH_ATTACKS)
#if defined(DIAGRAM_RECOVERY) || defined(DIAGRAM_ALL)
  valid_with_recovery_proof -> tx_theft_B0 [
    color = THEFT_EDGE_COLOR,
    arrowhead = odot,
    arrowtail = crow,
    dir = both
  ]

  tx_theft_B0 -> frozen [
    color = THEFT_EDGE_COLOR,
  ]
#endif
#endif /* WITH_ATTACKS */

#if defined(WITH_ATTACKS)
#if defined(DIAGRAM_SIMPLE) || defined(DIAGRAM_ALL)
  valid_simple -> tx_theft_A1 [
    label = "(temporarily succeeds \n until revoked \n using old revocation) ",
    color = THEFT_EDGE_COLOR,
    arrowhead = odot,
    arrowtail = crow,
    dir = both
  ]
  tx_theft_A1 -> valid_simple [
    fontcolor = THEFT_EDGE_COLOR,
    color = THEFT_EDGE_COLOR,
  ]
#endif
#endif /* WITH_ATTACKS */

#if defined(DIAGRAM_RECOVERY) || defined(DIAGRAM_ALL)
#if defined(WITH_ATTACKS)
  valid_with_recovery_proof -> tx_theft_B1 [
    color = THEFT_EDGE_COLOR,
    arrowhead = odot,
    arrowtail = crow,
    dir = both
  ]
  tx_theft_B1 -> settling_to_with_recovery [
    color = THEFT_EDGE_COLOR
  ]
#endif /* WITH_ATTACKS */

  frozen:PORT_ACTION -> tx_recovery [
    arrowhead = odot,
    arrowtail = crow,
    color = RECOVERY_EDGE_COLOR,
    dir = both
  ]
  frozen:PORT_TIMEOUT -> revoked [
    label = "timeout",
    decorate = true,
    color = REVOKE_FINAL_COLOR,
    fontcolor = REVOKE_FINAL_COLOR,
  ]
  tx_recovery -> valid_with_recovery_proof [
    color = RECOVERY_EDGE_COLOR,
  ]

  valid_with_recovery_proof -> tx_revocation [
    color = REVOKE_FINAL_COLOR,
    arrowhead = odot,
    arrowtail = crow,
    dir = both
  ]
#endif

#if defined(DIAGRAM_SIMPLE) || defined(DIAGRAM_ALL)
  valid_simple -> tx_revocation [
    color = REVOKE_FINAL_COLOR,
    arrowhead = odot,
    arrowtail = crow,
    dir = both
  ]
#endif

#if defined(DIAGRAM_RECOVERY) || defined(DIAGRAM_SIMPLE) || defined(DIAGRAM_ALL)
  tx_revocation -> revoked [
    color = REVOKE_FINAL_COLOR
  ]
#endif

} /* end digraph */
